ORG 00H 
	SECONDNUM EQU P2.7
	SECONDDIGIT EQU P2.6
ORG 0030H 
SETUP:
	MOV TMOD, #21H 
	MOV TH1, #0FDH 
	MOV SCON, #50H 
	SETB TR1
	MOV R4, #00H ;STORE RESULT
	MOV R3, #00H ;STORE NUM2
	MOV R2, #00H ;STORE OPERATOR
	MOV R1, #00H ;STORE NUM1
	MOV P1 , #0FEH ; BAT DAU VOI HANG 1 ; CHANGE TO DEBUG
	MOV P2, #00H
	//MOV R1, #01H ;CHANGE TO DEBUG
	//SETB SECONDDIGIT ; CHANGE TO DEBUG
SCANHANG:
	JNB P1.0, SCANCOT1
	JNB P1.1, SCANCOT2
	JNB P1.2, SCANCOT3
	JNB P1.3, SCANCOT4
SJMP SCANHANG

SCANCOT3:
	JNB P1.4, BUTTON_4
	JNB P1.5, BUTTON_5
	JNB P1.6, BUTTON_6
	JNB P1.7, BUTTON_MUL
	SETB P1.2
	CLR P1.3	
SJMP SCANHANG

SCANCOT2:
	//CLR P1.4 ;CHANGE TO DEBUG
	JNB P1.4, BUTTON_1
	JNB P1.5, BUTTON_2
	JNB P1.6, BUTTON_3
	JNB P1.7, BUTTON_SUB
	SETB P1.1
	CLR P1.2	
SJMP SCANHANG

SCANCOT1:
	JNB P1.4, BUTTON_ON
	JNB P1.5, BUTTON_0
	JNB P1.6, BUTTON_EQUAL
	JNB P1.7, BUTTON_ADD
	SETB P1.0
	CLR P1.1	
SJMP SCANHANG

SCANCOT4: 
	JNB P1.4, BUTTON_7
	JNB P1.5, BUTTON_8
	JNB P1.6, BUTTON_9
	JNB P1.7, BUTTON_DIVIDE
	SETB P1.3
	CLR P1.0
SJMP SCANHANG

BUTTON_ON: 
	ACALL DELAY
	LJMP CLICK_ON
BUTTON_0: 
	ACALL DELAY
	LJMP CLICK_0
BUTTON_EQUAL: 
	ACALL DELAY
	LJMP CLICK_EQUAL
BUTTON_ADD:
	ACALL DELAY
	LJMP CLICK_ADD
BUTTON_1:
	ACALL DELAY
	LJMP CLICK_1
BUTTON_2:
	ACALL DELAY
	LJMP CLICK_2
BUTTON_3:
	ACALL DELAY
	LJMP CLICK_3
BUTTON_SUB:
	ACALL DELAY
	LJMP CLICK_SUB
BUTTON_4:
	ACALL DELAY
	LJMP CLICK_4
BUTTON_5:
	ACALL DELAY
	LJMP CLICK_5
BUTTON_6:
	ACALL DELAY
	LJMP CLICK_6
BUTTON_MUL: 
	ACALL DELAY
	LJMP CLICK_MUL
BUTTON_7:
	ACALL DELAY
	LJMP CLICK_7
BUTTON_8:
	ACALL DELAY
	LJMP CLICK_8
BUTTON_9:
	ACALL DELAY
	LJMP CLICK_9
BUTTON_DIVIDE:
	ACALL DELAY
	LJMP CLICK_DIVIDE

CLICK_ON: 
	SETB P2.0
LJMP SCANHANG

CLICK_0:
	MOV R0, #'0'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_EQUAL:
	MOV R0, #'='
	ACALL TRUYEN
	ACALL RESULT
LJMP SCANHANG

CLICK_ADD:
	MOV R0, #'+'
	ACALL OPERATOR
	ACALL TRUYEN
LJMP SCANHANG

CLICK_1:
	MOV R0, #'1'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_2:
	MOV R0, #'2'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_3:
	MOV R0, #'3'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_SUB:
	MOV R0, #'-'
	ACALL OPERATOR
	ACALL TRUYEN
LJMP SCANHANG

CLICK_4:
	MOV R0, #'4'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_5:
	MOV R0, #'5'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_6:
	MOV R0, #'6'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_MUL:
	MOV R0, #'*'
	ACALL OPERATOR
	ACALL TRUYEN
LJMP SCANHANG

CLICK_7:
	MOV R0, #'7'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_8:
	MOV R0, #'8'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_9:
	MOV R0, #'9'
	ACALL STORE_NUM
	ACALL TRUYEN
LJMP SCANHANG

CLICK_DIVIDE:
	MOV R0, #'/'
	ACALL OPERATOR
	ACALL TRUYEN
LJMP SCANHANG

TRUYEN: 
	MOV SBUF, R0 
	JNB TI, $ 
	CLR TI
	ACALL DELAY1MS
RET

STORE_NUM:
	JB SECONDNUM, STORE_NUM2
	JB SECONDDIGIT, STORE_SECONDDIGIT_NUM1
	MOV A, R0
	SUBB A, #30H
	MOV R1, A
	SETB SECONDDIGIT
RET

STORE_SECONDDIGIT_NUM1:
	MOV A, R0
	MOV B, #10D
	SUBB A, #30H
	MOV R7, A
	MOV A, R1
	MUL AB
	MOV R6, B
	CJNE R6, #00H, OVERFLOW
	ADD A, R7
	JC OVERFLOW
	MOV R1, A
	SETB SECONDDIGIT
RET
STORE_NUM2:
	JB SECONDDIGIT, STORE_SECONDDIGIT_NUM2
	MOV A, R0
	SUBB A, #30H
	MOV R3, A
	SETB SECONDDIGIT
RET
STORE_SECONDDIGIT_NUM2:
	MOV A, R0
	MOV B, #10D
	SUBB A, #30H
	MOV R7, A
	MOV A, R3
	MUL AB
	MOV R6, B
	CJNE R6, #00H, OVERFLOW
	ADD A, R7
	JC OVERFLOW
	MOV R3, A
	SETB SECONDDIGIT
RET

OPERATOR:
	SETB SECONDNUM
	CLR SECONDDIGIT
	MOV A, R0
	MOV R2, A
RET

RESULT:
	CJNE R2, #"+", SUB
	MOV A, R1
	CLR C
	ADD A, R3
	JC OVERFLOW
	MOV R5, #0H
	MOV R4, A
LJMP ERROR

SUB:
	CJNE R2, #"-", MULTI
	MOV A, R1
	CLR C
	SUBB A, R3
	JC OVERFLOW
	MOV R5, #0H
	MOV R4, A
LJMP ERROR

MULTI:
	CJNE R2, #"*", DIVIDE
	MOV A, R1
	MOV B, R3
	MUL AB
	MOV R7, B
	CJNE R7, #0H, OVERFLOW
	MOV R5, #0H
	MOV R4, A
LJMP ERROR

DIVIDE:
	MOV A, R1
	MOV B, R3
	DIV AB
	MOV R4, A
	MOV R5, B
LJMP ERROR

OVERFLOW:
	MOV DPTR, #MES_OVERFLOW
	CLR C
	MOV R7, #0D
SHOW_MES_OVERFLOW:
	MOV A, R7
	MOVC A, @A+DPTR
	MOV R0, A
	ACALL TRUYEN
	JZ END_SHOW
	INC R7
	SJMP SHOW_MES_OVERFLOW
END_SHOW:
RET

ERROR:
	CJNE R3, #0D, NORMAL
	CJNE R2, #"/", NORMAL
	MOV DPTR, #MES_ERROR
	CLR C
	MOV R7, #0D
SHOW_MES_ERROR:
	MOV A, R7
	MOVC A, @A+DPTR
	MOV R0, A
	ACALL TRUYEN
	INC R7
	JNZ SHOW_MES_ERROR
RET

NORMAL:
	MOV R7, #100D
	CLR C
	SUBB A, R7
	JC MINIMUM100
	MOV A, R4
	MOV B, R7
	DIV AB
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	MOV R4, B
	MOV A, B
	MOV R7, #10D
	MOV B, R7
	DIV AB
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	MOV A, B
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	CJNE R5, #00H, DECIMAL
RET

MINIMUM100:
	MOV R7, #10D
	CLR C
	MOV A, R4
	SUBB A, R7
	JC MINIMUM10
	MOV A, R4
	MOV B, R7
	DIV AB
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	MOV A, B
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	CJNE R5, #00H, DECIMAL
RET

MINIMUM10:
	MOV A, R4
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
	CJNE R5, #00H, DECIMAL
RET

DECIMAL:
	MOV R0, #"."
	ACALL TRUYEN
	MOV A, R5
	MOV B, #10D
	MUL AB
	MOV B, R3
	DIV AB
	ADD A, #30H
	MOV R0, A
	ACALL TRUYEN
RET

DELAY1MS:
	MOV TH0, #0FCH
	MOV TL0, #67H
	SETB TR0
	JNB TF0, $
	CLR TF0
	CLR TR0
RET

DELAY:	MOV 62, #2		;APLICAR DELAY DE 0.25s
DELAY1:	MOV 61, #250
DELAY2:	MOV 60, #250	
	DJNZ 60, $
	DJNZ 61, DELAY2
	DJNZ 62, DELAY1
	RET

MES_OVERFLOW: DB "OVERFLOW!",0
MES_ERROR: DB "ERROR", 0

END